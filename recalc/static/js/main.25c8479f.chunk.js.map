{"version":3,"sources":["TreebeardTheme.js","RecipeCalculator.js","TreebeardDecorators.js","App.js","serviceWorker.js","index.js"],"names":["TreebeardTheme","tree","base","listStyle","backgroundColor","margin","padding","color","fontFamily","fontSize","node","position","link","cursor","display","activeLink","background","toggle","verticalAlign","marginLeft","height","width","wrapper","top","left","arrow","fill","strokeWidth","header","connector","borderLeft","borderBottom","title","lineHeight","subtree","paddingLeft","loading","BuildTreeNode","recipe","output","demandPerDay","recipeQty","inputs","factory","Object","classCallCheck","this","RecipeCalculator","rawData","recipeToBuilding","_mapRecipesToBuildings","producers","outputToRecipe","_mapOutputs","recipes","dataTimestamp","timestamp","r","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","p","value","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","err","return","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","name","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","outputs","Fraction","find","o","amount","Math","floor","days","requirements","map","qtyPerDay","buildTree","product","buildTreeFromRecipe","productRecipe","_this","outputQtyPerDay","div","input","inputCount","mul","root","t","_totals","_addTotalFractionsAndCost","addTotals","target","a","_i","_Object$entries","entries","length","_ref3","_ref2","slicedToArray","otherTotal","hasOwnProperty","assign","total","towards","add","defineProperty","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","totals","traverse","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","push","fraction","_i2","_Object$entries2","_ref6","_ref5","building","singleFactoryCost","harvesterCost","cost","isHarvester","roundFactoryCount","ceil","valueOf","totalFactoryCost","RecipeContainer","react_default","createElement","style","props","className","_this$props","decorators","onClick","active","objectSpread","container","children","renderEmptyToggle","renderToggle","Header","Treebeard","defaultProps","Container","propTypes","PropTypes","object","isRequired","terminal","bool","func","animations","oneOfType","_copyDefaultDecorators","recipeDecorators","emptyContainerDecorators","Fragment","React","App","App_CalculatorRoot","calculator","roiData","Component","CalculatorRoot","possibleConstructorReturn","getPrototypeOf","call","onBuildTreeToggle","bind","assertThisInitialized","onTotalsTreeToggle","onInputChange","onSettingsChange","pf","state","settings","numbers","perDays","_recompute","requiredN","requiredProducts","_this2","filter","req","_ref","buildTreeFromMany","grandTotal","values","reduce","b","calculationState","required","treebeardTree","toTreebeardTree","treebeardTotals","toTreebeardTotals","newSettings","_this3","setState","prevState","keys","sort","App_CalculatorInput","onChange","App_CalculatorSettings","totalsTreeHeader","react_treebeard","data","onToggle","buildTreeHeader","id","recipeHeader","_this4","_this5","level","arguments","_recipeHeader","toggled","i","_this6","_renderCosts","pc","extraClassName","treeName","cursorName","_ref4","_onTreeToggle","f","format","n","toFixed","d","CalculatorInput","_this7","onAddAnotherClick","onRemoveRow","_this8","index","key","App_CalculatorInputRow","e","type","newRequired","toConsumableArray","splice","_newRecipe","concat","changedRequirement","console","log","CalculatorInputRow","_this9","onRecipeChanged","onQtyChanged","_renderRecipeOptions","event","intVal","parseFloat","isNaN","CalculatorSettings","_this10","_e$target","htmlFor","checked","c","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25c8479f.chunk.js","sourcesContent":["export default {\r\n    tree: {\r\n        base: {\r\n            listStyle: 'none',\r\n            backgroundColor: '#21252B',\r\n            margin: 0,\r\n            padding: 0,\r\n            color: '#9DA5AB',\r\n            fontFamily: 'lucida grande ,tahoma,verdana,arial,sans-serif',\r\n            fontSize: '16px'\r\n        },\r\n        node: {\r\n            base: {\r\n                position: 'relative',\r\n            },\r\n            link: {\r\n                cursor: 'pointer',\r\n                position: 'relative',\r\n                padding: '0px 5px',\r\n                display: 'block'\r\n            },\r\n            activeLink: {\r\n                background: '#31363F'\r\n            },\r\n            toggle: {\r\n                base: {\r\n                    position: 'relative',\r\n                    display: 'inline-block',\r\n                    verticalAlign: 'top',\r\n                    marginLeft: '-5px',\r\n                    height: '24px',\r\n                    width: '24px'\r\n                },\r\n                wrapper: {\r\n                    position: 'absolute',\r\n                    top: '50%',\r\n                    left: '50%',\r\n                    margin: '-7px 0 0 -7px',\r\n                    height: '14px'\r\n                },\r\n                height: 14,\r\n                width: 14,\r\n                arrow: {\r\n                    fill: '#9DA5AB',\r\n                    strokeWidth: 0\r\n                }\r\n            },\r\n            header: {\r\n                base: {\r\n                    display: 'inline-block',\r\n                    verticalAlign: 'top',\r\n                    color: '#9DA5AB'\r\n                },\r\n                connector: {\r\n                    width: '2px',\r\n                    height: '12px',\r\n                    borderLeft: 'solid 2px black',\r\n                    borderBottom: 'solid 2px black',\r\n                    position: 'absolute',\r\n                    top: '0px',\r\n                    left: '-21px'\r\n                },\r\n                title: {\r\n                    lineHeight: '24px',\r\n                    verticalAlign: 'middle'\r\n                }\r\n            },\r\n            subtree: {\r\n                listStyle: 'none',\r\n                paddingLeft: '19px'\r\n            },\r\n            loading: {\r\n                color: '#E2C089'\r\n            }\r\n        }\r\n    }\r\n};\r\n","import Fraction from 'fraction.js'\r\n\r\nclass BuildTreeNode {\r\n  constructor(recipe, output, demandPerDay, recipeQty, inputs, factory) {\r\n    this.recipe = recipe\r\n    this.output = output\r\n    this.demandPerDay = demandPerDay\r\n    this.recipeQty = recipeQty\r\n    this.inputs = inputs\r\n    this.factory = factory\r\n  }\r\n}\r\n\r\nclass RecipeCalculator {\r\n  constructor(rawData) {\r\n    this.recipeToBuilding = this._mapRecipesToBuildings(rawData.producers)\r\n    this.outputToRecipe = this._mapOutputs(rawData.recipes)\r\n    this.dataTimestamp = rawData.timestamp\r\n\r\n    this.recipeToBuilding[''] = {} // TODO:\r\n  }\r\n\r\n  _mapRecipesToBuildings(producers) {\r\n    let r = {}\r\n    for (let p of producers) {\r\n      for (let recipe of p.recipes) {\r\n        r[recipe] = p\r\n      }\r\n    }\r\n    return r\r\n  }\r\n\r\n  _mapOutputs(recipes) {\r\n    let r = {}\r\n    for (let recipe of recipes) {\r\n      if (recipe.name === 'WaterWell') continue\r\n      for (let out of recipe.outputs) {\r\n        r[out.name] = recipe\r\n      }\r\n    }\r\n    return r\r\n  }\r\n\r\n  outputQtyPerDay(recipe, output) {\r\n    return Fraction(recipe.outputs.find(o => o.name === output).amount, Math.floor(recipe.days))\r\n  }\r\n\r\n  buildTreeFromMany(requirements) {\r\n    this.outputToRecipe[''] = {\r\n      days: 1,\r\n      name: '',\r\n      inputs: requirements.map((r) => ({name: r.recipe, amount: r.qtyPerDay})),\r\n      outputs: [{name: '', amount: 1}],\r\n    }\r\n    return this.buildTree('', Fraction(1, 1))\r\n  }\r\n\r\n  buildTree(product, qtyPerDay) {\r\n    // console.log(\"PRODUCT\", product, qtyPerDay)\r\n    return this.buildTreeFromRecipe(product, this.outputToRecipe[product], qtyPerDay)\r\n  }\r\n\r\n  buildTreeFromRecipe(product, productRecipe, qtyPerDay) {\r\n    let outputQtyPerDay = this.outputQtyPerDay(productRecipe, product)\r\n    let recipeQty = qtyPerDay.div(outputQtyPerDay)\r\n    let input_qty = (inputCount) => recipeQty.mul(inputCount).div(Math.floor(productRecipe.days))\r\n    return new BuildTreeNode(productRecipe.name, product, qtyPerDay, recipeQty, \r\n      productRecipe.inputs.map(input => this.buildTree(input.name, input_qty(input.amount))),\r\n      this.recipeToBuilding[productRecipe.name].name)\r\n  }\r\n\r\n  totals(root) {\r\n    const t = this._totals(root)\r\n    this._addTotalFractionsAndCost(root, t)\r\n    return t\r\n  }\r\n\r\n  _totals(node) {\r\n    let newTotal = () => Object.assign({total: Fraction(0), towards: []})\r\n\r\n    let addTotals = (target, a) => {\r\n      for (let [recipe, otherTotal] of Object.entries(a)) {\r\n        if (!target.hasOwnProperty(recipe)) target[recipe] = newTotal();\r\n        target[recipe].total = target[recipe].total.add(otherTotal.total)\r\n      }\r\n    }\r\n\r\n    let t = {[node.output]: {total: node.recipeQty, towards: []}}\r\n    for (let input of node.inputs) {\r\n      addTotals(t, this.totals(input))\r\n    }\r\n    \r\n    delete t['']\r\n    return t\r\n  }\r\n\r\n  _addTotalFractionsAndCost(root, totals) {\r\n    const traverse = (node) => {\r\n      for (let input of node.inputs) {\r\n        const inTotal = totals[input.output]\r\n        inTotal.towards.push({\r\n          recipe: node.recipe,\r\n          product: node.product,\r\n          recipeQty: input.recipeQty,\r\n          fraction: input.recipeQty.div(totals[input.output].total)\r\n        })\r\n        traverse(input)\r\n      }\r\n    }\r\n    traverse(root)\r\n    for (let [product, total] of Object.entries(totals)) {\r\n      const productRecipe = this.outputToRecipe[product]\r\n      const building = this.recipeToBuilding[productRecipe.name]\r\n      total.factory = building.name\r\n      total.singleFactoryCost = building.harvesterCost ? building.harvesterCost : building.cost\r\n      total.isHarvester = !!building.harvesterCost\r\n      total.roundFactoryCount = Math.ceil(total.total.valueOf())\r\n      total.totalFactoryCost = total.roundFactoryCount * total.singleFactoryCost\r\n      total.demandPerDay = total.total.mul(this.outputQtyPerDay(productRecipe, product))\r\n    }\r\n  }\r\n}\r\n\r\nexport default RecipeCalculator\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Treebeard} from 'react-treebeard'\r\n\r\nconst InvisibleContainer = () => null\r\n\r\nclass RecipeContainer extends Treebeard.defaultProps.decorators.Container {\r\n    renderEmptyToggle() {\r\n        return (<div style={this.props.style.toggle.base} className=\"emptyToggle\">◼&nbsp;</div>)\r\n    }\r\n\r\n    render() {\r\n        const {style, decorators, onClick, node} = this.props;\r\n        return (\r\n            <div\r\n                onClick={onClick}\r\n                style={node.active ? {...style.container} : {...style.link}}>\r\n                {node.children === null ? null : \r\n                    (node.children.length === 0 ? this.renderEmptyToggle() : this.renderToggle()) }\r\n                <decorators.Header node={node} style={style.header}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nRecipeContainer.propTypes = {\r\n    style: PropTypes.object.isRequired,\r\n    decorators: PropTypes.object.isRequired,\r\n    terminal: PropTypes.bool.isRequired,\r\n    onClick: PropTypes.func.isRequired,\r\n    animations: PropTypes.oneOfType([\r\n        PropTypes.object,\r\n        PropTypes.bool\r\n    ]).isRequired,\r\n    node: PropTypes.object.isRequired\r\n};\r\n\r\n\r\nconst _copyDefaultDecorators= (o => Object.assign({}, Treebeard.defaultProps.decorators, o))\r\nvar recipeDecorators = _copyDefaultDecorators({ Container: RecipeContainer })\r\nvar emptyContainerDecorators = _copyDefaultDecorators({ Container: InvisibleContainer })\r\n\r\nexport {\r\n    recipeDecorators,\r\n    emptyContainerDecorators,\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport roiData from './roidata/exports.json';\r\nimport {Treebeard} from 'react-treebeard'\r\nimport Fraction from 'fraction.js'\r\nimport TreebeardTheme from \"./TreebeardTheme.js\";\r\nimport RecipeCalculator from \"./RecipeCalculator.js\"\r\nimport { recipeDecorators, emptyContainerDecorators } from \"./TreebeardDecorators.js\"\r\n\r\nconst Fragment = React.Fragment\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return <CalculatorRoot calculator={new RecipeCalculator(roiData)}/>\r\n  }\r\n}\r\n\r\nclass CalculatorRoot extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.onBuildTreeToggle = this.onBuildTreeToggle.bind(this)\r\n    this.onTotalsTreeToggle = this.onTotalsTreeToggle.bind(this)\r\n    this.onInputChange = this.onInputChange.bind(this)\r\n    this.onSettingsChange = this.onSettingsChange.bind(this)\r\n    this.pf = this.pf.bind(this)\r\n    this.state = {\r\n      settings: {\r\n        numbers: 'fractions',\r\n        perDays: 15,\r\n      }\r\n    }\r\n    this.state = this._recompute(this.state, [{recipe: 'ChickenMeat', requiredN: 11}])\r\n  }\r\n\r\n  _recompute(target, requiredProducts) {\r\n    const requirements = requiredProducts\r\n        .filter(req => req.requiredN > 0)\r\n        .map(({recipe, requiredN}) => ({recipe, qtyPerDay: Fraction(requiredN, this.state.settings.perDays)}))\r\n    const buildTree = this.props.calculator.buildTreeFromMany(requirements)\r\n    const totals = this.props.calculator.totals(buildTree)\r\n    const grandTotal = Object.values(totals).map(t => t.totalFactoryCost).reduce((a, b) => a + b, 0)\r\n    const calculationState = {\r\n      required: requiredProducts,\r\n      tree: buildTree,\r\n      totals: totals,\r\n      grandTotal: grandTotal,\r\n      treebeardTree: this.toTreebeardTree(buildTree),\r\n      treebeardTotals: this.toTreebeardTotals(totals, grandTotal),\r\n    }\r\n    return Object.assign(target, calculationState)\r\n  }\r\n\r\n  onSettingsChange(newSettings) {\r\n    this.setState((prevState) => ({ settings: Object.assign(prevState.settings, newSettings) }))\r\n    // double update but meh\r\n    this.setState((prevState) => this._recompute({}, prevState.required))\r\n  }\r\n\r\n  render() {\r\n    const recipes = Object.keys(this.props.calculator.outputToRecipe)\r\n    recipes.sort()\r\n    return (\r\n      <div>\r\n        <h4>What and how much do you desire?</h4>\r\n        <CalculatorInput required={this.state.required} recipes={recipes} perDays={this.state.settings.perDays} onChange={this.onInputChange} />\r\n        <CalculatorSettings settings={this.state.settings} onChange={this.onSettingsChange} />\r\n        <h4>Totals</h4>\r\n        {this.totalsTreeHeader()}\r\n        <Treebeard data={this.state.treebeardTotals} onToggle={this.onTotalsTreeToggle} style={TreebeardTheme} />\r\n        <h4>Build tree</h4>\r\n        {this.buildTreeHeader()}\r\n        <Treebeard data={this.state.treebeardTree} onToggle={this.onBuildTreeToggle} style={TreebeardTheme} />\r\n        <p className='timestamp'>Data harvested on {this.props.calculator.dataTimestamp}</p>\r\n      </div>)\r\n  }\r\n\r\n  buildTreeHeader() {\r\n    return (\r\n      <div id='buildTreeHeader' className='treeHeader'>\r\n        <div className='filler'>&nbsp;</div>\r\n        {this.recipeHeader()}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  recipeHeader() {\r\n    return (\r\n      <Fragment>\r\n        <span className=\"productName header\">Product</span>\r\n        <span className=\"demand header tooltipHolder\">Demand<span className='tooltipText'>per {this.state.settings.perDays} days</span></span>\r\n        <span className=\"recipeQty header tooltipHolder\">x<span className=\"tooltipText\">number of factories</span></span>\r\n        <span className=\"factory header\">Factory Building</span>\r\n      </Fragment>\r\n    )\r\n  }\r\n\r\n  totalsTreeHeader() {\r\n    return (\r\n      <div id='totalsHeader' className='treeHeader'>\r\n        <div className='filler'>&nbsp;</div>\r\n        {this.recipeHeader()}\r\n        <span className=\"recipeQtyRoundUp header tooltipHolder\">⌈x⌉<span className=\"tooltipText\">number of factories rounded up</span></span>\r\n        <span className=\"header\">&nbsp;x&nbsp;</span>\r\n        <span className=\"singleFactoryCost header tooltipHolder\">Cost<span className=\"tooltipText\">single factory or field cost</span></span>\r\n        <span className=\"header\">&nbsp;=&nbsp;</span>\r\n        <span className=\"totalCost header\">Total</span>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  onInputChange(required) {\r\n    this.setState((prevState) => this._recompute(prevState, required))\r\n  }\r\n\r\n  toTreebeardTree(node, level=0) {\r\n    return {\r\n      name: level === 0 ? null : this._recipeHeader(node.output, node.demandPerDay, node.recipeQty, node.factory, 'pn'+(level-1)),\r\n      toggled: true,\r\n      children: node.inputs.map(i => this.toTreebeardTree(i, level + 1)),\r\n      decorators: level === 0 ? emptyContainerDecorators : recipeDecorators,\r\n    }\r\n  }\r\n\r\n  toTreebeardTotals(totals, grandTotal) {\r\n    const r = Object.entries(totals).map(([output, totals]) => ({\r\n        name: (<Fragment>{this._recipeHeader(output, totals.demandPerDay, totals.total, totals.factory)}{this._renderCosts(totals)}</Fragment>),\r\n        toggled: false,\r\n        children: totals.towards.length <= 1 ? [] : totals.towards.map(t => Object.assign({\r\n          name: (<Fragment>\r\n                   {t.fraction.valueOf() === 1.0 ? 'all' : this.pf(t.fraction)} towards {t.recipe || \"requirement\"} ({this.pf(t.recipeQty)} buildings)\r\n                 </Fragment>),\r\n          toggled: false,\r\n          children: null,\r\n        })),\r\n        decorators: recipeDecorators,\r\n    }))\r\n    return {\r\n      name: (<Fragment>\r\n        <span className=\"totalHeader\">Total excluding hubs</span>\r\n        <span className=\"totalCost\">{pc(grandTotal)}</span>\r\n        </Fragment>),\r\n      toggled: true,\r\n      children: r,\r\n    }\r\n  }\r\n\r\n  _recipeHeader(output, demandPerDay, recipeQty, factory, extraClassName='') {\r\n    return output === '' ? null : (<Fragment>\r\n      <span className={\"productName \" + extraClassName}>{output}</span>\r\n      <span className=\"demand\">{this.pf(demandPerDay.mul(this.state.settings.perDays))}</span>\r\n      <span className=\"recipeQty\">{this.pf(recipeQty)}</span>\r\n      <span className=\"factory\">{factory}</span>\r\n      </Fragment>)\r\n  }\r\n\r\n  _renderCosts(totals) {\r\n    return (<Fragment>\r\n      <span className=\"recipeQtyRoundUp\">{totals.roundFactoryCount}</span>\r\n      &nbsp;x&nbsp;\r\n      <span className=\"singleFactoryCost\">{pc(totals.singleFactoryCost)}</span>\r\n      &nbsp;=&nbsp;\r\n      <span className=\"totalCost\">{pc(totals.totalFactoryCost)}</span>\r\n      </Fragment>)\r\n  }\r\n\r\n  _onTreeToggle(node, toggled, treeName, cursorName) {\r\n    const cursor = this.state[cursorName]\r\n    const tree = this.state[treeName]\r\n    if (cursor) {\r\n      cursor.active = false;\r\n    }\r\n    node.active = true;\r\n    if (node.children) { \r\n        node.toggled = toggled; \r\n    }\r\n    this.setState(() => ({\r\n      [cursorName]: node, \r\n      [treeName]: Object.assign({}, tree)\r\n    }));\r\n  }\r\n\r\n  onBuildTreeToggle(node, toggled) {\r\n    this._onTreeToggle(node, toggled, 'treebeardTree', 'buildCursor')\r\n  }\r\n\r\n  onTotalsTreeToggle(node, toggled) {\r\n    this._onTreeToggle(node, toggled, 'treebeardTotals', 'totalsCursor')\r\n  }\r\n\r\n  pf(f) {\r\n    return pf(f, this.state.settings.numbers)\r\n  }\r\n}\r\n\r\nclass CalculatorInput extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.onChange = this.onChange.bind(this)\r\n    this.onAddAnotherClick = this.onAddAnotherClick.bind(this)\r\n    this.onRemoveRow = this.onRemoveRow.bind(this)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ul id='calculatorInput'>\r\n        {this.props.required.map((req, index) => (\r\n          <li key={index}>\r\n            <CalculatorInputRow recipes={this.props.recipes} recipe={req.recipe} \r\n                requiredN={req.requiredN} perDays={this.props.perDays} onChange={(e) => this.onChange(index, e)} />\r\n            <button type=\"button\" className='closeButton fakeLink' onClick={(e) => this.onRemoveRow(index)}>🗙</button>\r\n          </li>\r\n        ))}\r\n        <li key=\"bottomest\"><button onClick={this.onAddAnotherClick} className='addRecipeButton fakeLink'>add another recipe</button></li>\r\n      </ul>\r\n      )\r\n  }\r\n\r\n  onRemoveRow(index) {\r\n    var newRequired = [...this.props.required]\r\n    newRequired.splice(index, 1)\r\n    if (newRequired.length === 0) {\r\n      newRequired = [this._newRecipe()]\r\n    }\r\n    this.props.onChange(newRequired)\r\n  }\r\n\r\n  onAddAnotherClick() {\r\n    const newRequired = this.props.required.concat([this._newRecipe()])\r\n    this.props.onChange(newRequired)\r\n  }\r\n\r\n  _newRecipe() {\r\n    return {recipe: 'Water', requiredN: 1}\r\n  }\r\n\r\n  onChange(index, changedRequirement) {\r\n    var newRequired = [...this.props.required]\r\n    console.log(changedRequirement, index, newRequired)\r\n    Object.assign(newRequired[index], changedRequirement)\r\n    this.props.onChange(newRequired)\r\n  }\r\n}\r\n\r\nclass CalculatorInputRow extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.onRecipeChanged = this.onRecipeChanged.bind(this)\r\n    this.onQtyChanged = this.onQtyChanged.bind(this)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        Recipe:&nbsp;\r\n        <select onChange={this.onRecipeChanged} value={this.props.recipe}>\r\n          {this._renderRecipeOptions()}\r\n        </select>\r\n        &nbsp;\r\n        Quantity:&nbsp;\r\n        <input type='number' onChange={this.onQtyChanged} value={this.props.requiredN} className=\"inputNumber\" />\r\n        &nbsp;per {this.props.perDays} days\r\n      </Fragment>\r\n    )\r\n  }\r\n\r\n  _renderRecipeOptions() {\r\n    return this.props.recipes.map(recipe => (\r\n      <option key={recipe} value={recipe}>{recipe}</option>\r\n    ))\r\n  }\r\n\r\n  onRecipeChanged(event) {\r\n    this.props.onChange({ recipe: event.target.value })\r\n  }\r\n\r\n  onQtyChanged(event) {\r\n    const intVal = parseFloat(event.target.value)\r\n    if (isNaN(intVal)) return\r\n    this.props.onChange({requiredN: intVal})\r\n  }\r\n}\r\n\r\n\r\nclass CalculatorSettings extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange(e) {\r\n    const { name, value } = e.target;\r\n    this.props.onChange({[name]: value})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id='settings'>\r\n        <p>\r\n          <label htmlFor='perDays'>Per </label>\r\n          <input id='perDays' type='number' name='perDays' value={this.props.settings.perDays} onChange={this.onChange} className=\"inputNumber\" />\r\n          <label htmlFor='perDays'> days </label> (required quantity and demand will be shown per this many days)\r\n        </p>\r\n        <p>\r\n          <label htmlFor='fractions'>Fractions</label>\r\n          <input id='fractions' type='radio' name='numbers' value='fractions' checked={this.props.settings.numbers === 'fractions'} onChange={this.onChange}/>\r\n          &nbsp;&nbsp;&nbsp;&nbsp;\r\n          <label htmlFor='decimals'>Decimals</label>\r\n          <input id='decimals' type='radio' name='numbers' value='decimals' checked={this.props.settings.numbers === 'decimals'} onChange={this.onChange}/>\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nfunction pf(f, format='fractions') {\r\n  if (f === null || f === undefined) return '<NOOO>'\r\n  if (f.n === 0) return '0'\r\n  if (format !== 'fractions') {\r\n    return f.valueOf().toFixed(2)\r\n  }\r\n  const _render_proper_fraction = (n, d) => (<Fragment><sup>{n}</sup>&frasl;<sub>{d}</sub></Fragment>)\r\n  let i = Math.floor(f.n / f.d)\r\n  let r = f.n % f.d\r\n  return (<Fragment>{i === 0 ? '' : i}{r === 0 ? '' : _render_proper_fraction(r, f.d)}</Fragment>)\r\n}\r\n\r\nfunction pc(c) {\r\n  return \"$\" + c;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}