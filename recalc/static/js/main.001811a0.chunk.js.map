{"version":3,"sources":["TreebeardTheme.js","RecipeCalculator.js","App.js","serviceWorker.js","index.js"],"names":["TreebeardTheme","tree","base","listStyle","backgroundColor","margin","padding","color","fontFamily","fontSize","node","position","link","cursor","display","activeLink","background","toggle","verticalAlign","marginLeft","height","width","wrapper","top","left","arrow","fill","strokeWidth","header","connector","borderLeft","borderBottom","title","lineHeight","subtree","paddingLeft","loading","BuildTreeNode","recipe","output","demand_per_day","recipeQty","inputs","factory","Object","classCallCheck","this","RecipeCalculator","rawData","recipeToBuilding","_mapRecipesToBuildings","producers","outputToRecipe","_mapOutputs","recipes","dataTimestamp","timestamp","r","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","p","value","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","err","return","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","name","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","outputs","Fraction","find","o","amount","Math","floor","days","product","qty_per_day","_this","productRecipe","outputQtyPerDay","div","map","input","buildTree","inputCount","mul","root","t","_totals","_addTotalFractionsAndCost","addTotals","target","a","_i","_Object$entries","entries","length","_ref3","_ref2","slicedToArray","otherTotal","hasOwnProperty","assign","total","towards","add","defineProperty","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","totals","traverse","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","push","fraction","_i2","_Object$entries2","_ref6","_ref5","building","singleFactoryCost","harvesterCost","cost","isHarvester","roundFactoryCount","ceil","valueOf","totalFactoryCost","Fragment","React","App","state","calculator","loadError","_this2","fetch","then","response","json","data","setState","catch","error","react_default","createElement","toString","App_CalculatorRoot","Component","CalculatorRoot","props","_this3","possibleConstructorReturn","getPrototypeOf","call","onBuildTreeToggle","bind","assertThisInitialized","onTotalsTreeToggle","onInputChange","onSettingsChange","pf","settings","numbers","_recompute","calculationState","requiredQty","grandTotal","values","reduce","b","_trees","treebeardTree","toTreebeardTree","treebeardTotals","toTreebeardTotals","newSettings","_this4","prevState","keys","sort","App_CalculatorInput","onChange","App_CalculatorSettings","buildTreeHeader","react_treebeard","onToggle","style","totalsTreeHeader","className","id","recipeHeader","_this5","newState","_this6","level","arguments","_recipeHeader","toggled","children","i","_this7","entry","_renderCosts","pc","demand","extraClassName","treeName","cursorName","active","_ref","_onTreeToggle","f","format","n","toFixed","d","CalculatorInput","_this8","onRecipeChanged","onQtyChanged","renderOptions","type","key","event","intVal","parseFloat","isNaN","CalculatorSettings","_this9","e","_e$target","checked","for","c","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qOAAeA,EAAA,CACXC,KAAM,CACFC,KAAM,CACFC,UAAW,OACXC,gBAAiB,UACjBC,OAAQ,EACRC,QAAS,EACTC,MAAO,UACPC,WAAY,iDACZC,SAAU,QAEdC,KAAM,CACFR,KAAM,CACFS,SAAU,YAEdC,KAAM,CACFC,OAAQ,UACRF,SAAU,WACVL,QAAS,UACTQ,QAAS,SAEbC,WAAY,CACRC,WAAY,WAEhBC,OAAQ,CACJf,KAAM,CACFS,SAAU,WACVG,QAAS,eACTI,cAAe,MACfC,WAAY,OACZC,OAAQ,OACRC,MAAO,QAEXC,QAAS,CACLX,SAAU,WACVY,IAAK,MACLC,KAAM,MACNnB,OAAQ,gBACRe,OAAQ,QAEZA,OAAQ,GACRC,MAAO,GACPI,MAAO,CACHC,KAAM,UACNC,YAAa,IAGrBC,OAAQ,CACJ1B,KAAM,CACFY,QAAS,eACTI,cAAe,MACfX,MAAO,WAEXsB,UAAW,CACPR,MAAO,MACPD,OAAQ,OACRU,WAAY,kBACZC,aAAc,kBACdpB,SAAU,WACVY,IAAK,MACLC,KAAM,SAEVQ,MAAO,CACHC,WAAY,OACZf,cAAe,WAGvBgB,QAAS,CACL/B,UAAW,OACXgC,YAAa,QAEjBC,QAAS,CACL7B,MAAO,sBCtEjB8B,EACJ,SAAAA,EAAYC,EAAQC,EAAQC,EAAgBC,EAAWC,EAAQC,GAAUC,OAAAC,EAAA,EAAAD,CAAAE,KAAAT,GACvES,KAAKR,OAASA,EACdQ,KAAKP,OAASA,EACdO,KAAKN,eAAiBA,EACtBM,KAAKL,UAAYA,EACjBK,KAAKJ,OAASA,EACdI,KAAKH,QAAUA,GAiGJI,aA5Fb,SAAAA,EAAYC,GAAUJ,OAAAC,EAAA,EAAAD,CAAAE,KAAAC,GACpBD,KAAKG,iBAAmBH,KAAKI,uBAAuBF,EAAQG,WAC5DL,KAAKM,eAAiBN,KAAKO,YAAYL,EAAQM,SAC/CR,KAAKS,cAAgBP,EAAQQ,6EAGRL,GACrB,IAAIM,EAAI,GADwBC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAEhC,QAAAC,EAAAC,EAAcZ,EAAda,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAyB,KAAhBU,EAAgBN,EAAAO,MAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAX,EAAA,IACvB,QAAAY,EAAAC,EAAmBN,EAAEd,QAArBU,OAAAC,cAAAK,GAAAG,EAAAC,EAAAR,QAAAC,MAAAG,GAAA,EAA8B,CAC5Bb,EAD4BgB,EAAAJ,OAChBD,GAFS,MAAAO,GAAAJ,GAAA,EAAAC,EAAAG,EAAA,YAAAL,GAAA,MAAAI,EAAAE,QAAAF,EAAAE,SAAA,WAAAL,EAAA,MAAAC,KAFO,MAAAG,GAAAhB,GAAA,EAAAC,EAAAe,EAAA,YAAAjB,GAAA,MAAAK,EAAAa,QAAAb,EAAAa,SAAA,WAAAjB,EAAA,MAAAC,GAOhC,OAAOH,sCAGGH,GACV,IAAIG,EAAI,GADWoB,GAAA,EAAAC,GAAA,EAAAC,OAAAlB,EAAA,IAEnB,QAAAmB,EAAAC,EAAmB3B,EAAnBU,OAAAC,cAAAY,GAAAG,EAAAC,EAAAf,QAAAC,MAAAU,GAAA,EAA4B,KAAnBvC,EAAmB0C,EAAAX,MAC1B,GAAoB,cAAhB/B,EAAO4C,KAAX,CAD0B,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAxB,EAAA,IAE1B,QAAAyB,EAAAC,EAAgBjD,EAAOkD,QAAvBxB,OAAAC,cAAAkB,GAAAG,EAAAC,EAAArB,QAAAC,MAAAgB,GAAA,EAAgC,CAC9B1B,EAD8B6B,EAAAjB,MACxBa,MAAQ5C,GAHU,MAAAqC,GAAAS,GAAA,EAAAC,EAAAV,EAAA,YAAAQ,GAAA,MAAAI,EAAAX,QAAAW,EAAAX,SAAA,WAAAQ,EAAA,MAAAC,MAFT,MAAAV,GAAAG,GAAA,EAAAC,EAAAJ,EAAA,YAAAE,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GAQnB,OAAOtB,0CAGOnB,EAAQC,GACtB,OAAOkD,IAASnD,EAAOkD,QAAQE,KAAK,SAAAC,GAAC,OAAIA,EAAET,OAAS3C,IAAQqD,OAAQC,KAAKC,MAAMxD,EAAOyD,yCAG9EC,EAASC,GAAa,IAAAC,EAAApD,KAE1BqD,EAAgBrD,KAAKM,eAAe4C,GACpCI,EAAkBtD,KAAKsD,gBAAgBD,EAAeH,GACtDvD,EAAYwD,EAAYI,IAAID,GAEhC,OAAO,IAAI/D,EAAc8D,EAAcjB,KAAMc,EAASC,EAAaxD,EACjE0D,EAAczD,OAAO4D,IAAI,SAAAC,GAAK,OAAIL,EAAKM,UAAUD,EAAMrB,MAFxCuB,EAEwDF,EAAMX,OAF/CnD,EAAUiE,IAAIjB,IAASgB,EAAYZ,KAAKC,MAAMK,EAAcJ,UAA5E,IAACU,IAGf3D,KAAKG,iBAAiBkD,EAAcjB,MAAMA,qCAGvCyB,GACL,IAAMC,EAAI9D,KAAK+D,QAAQF,GAEvB,OADA7D,KAAKgE,0BAA0BH,EAAMC,GAC9BA,kCAGDlG,GACN,IAEIqG,EAAY,SAACC,EAAQC,GACvB,QAAAC,EAAA,EAAAC,EAAiCvE,OAAOwE,QAAQH,GAAhDC,EAAAC,EAAAE,OAAAH,IAAoD,KAAAI,EAAAH,EAAAD,GAAAK,EAAA3E,OAAA4E,EAAA,EAAA5E,CAAA0E,EAAA,GAA1ChF,EAA0CiF,EAAA,GAAlCE,EAAkCF,EAAA,GAC7CP,EAAOU,eAAepF,KAAS0E,EAAO1E,GAJ1BM,OAAO+E,OAAO,CAACC,MAAOnC,IAAS,GAAIoC,QAAS,MAK7Db,EAAO1E,GAAQsF,MAAQZ,EAAO1E,GAAQsF,MAAME,IAAIL,EAAWG,SAI3DhB,EAAChE,OAAAmF,EAAA,EAAAnF,CAAA,GAAKlC,EAAK6B,OAAS,CAACqF,MAAOlH,EAAK+B,UAAWoF,QAAS,KAV7CG,GAAA,EAAAC,GAAA,EAAAC,OAAArE,EAAA,IAWZ,QAAAsE,EAAAC,EAAkB1H,EAAKgC,OAAvBsB,OAAAC,cAAA+D,GAAAG,EAAAC,EAAAlE,QAAAC,MAAA6D,GAAA,EAA+B,KAAtBzB,EAAsB4B,EAAA9D,MAC7B0C,EAAUH,EAAG9D,KAAKuF,OAAO9B,KAZf,MAAA5B,GAAAsD,GAAA,EAAAC,EAAAvD,EAAA,YAAAqD,GAAA,MAAAI,EAAAxD,QAAAwD,EAAAxD,SAAA,WAAAqD,EAAA,MAAAC,GAcZ,OAAOtB,oDAGiBD,EAAM0B,IACb,SAAXC,EAAY5H,GAAS,IAAA6H,GAAA,EAAAC,GAAA,EAAAC,OAAA5E,EAAA,IACzB,QAAA6E,EAAAC,EAAkBjI,EAAKgC,OAAvBsB,OAAAC,cAAAsE,GAAAG,EAAAC,EAAAzE,QAAAC,MAAAoE,GAAA,EAA+B,KAAtBhC,EAAsBmC,EAAArE,MACbgE,EAAO9B,EAAMhE,QACrBsF,QAAQe,KAAK,CACnBtG,OAAQ5B,EAAK4B,OACb0D,QAAStF,EAAKsF,QACdvD,UAAW8D,EAAM9D,UACjBoG,SAAUtC,EAAM9D,UAAU4D,IAAIgC,EAAO9B,EAAMhE,QAAQqF,SAErDU,EAAS/B,IATc,MAAA5B,GAAA6D,GAAA,EAAAC,EAAA9D,EAAA,YAAA4D,GAAA,MAAAI,EAAA/D,QAAA+D,EAAA/D,SAAA,WAAA4D,EAAA,MAAAC,IAY3BH,CAAS3B,GACT,QAAAmC,EAAA,EAAAC,EAA6BnG,OAAOwE,QAAQiB,GAA5CS,EAAAC,EAAA1B,OAAAyB,IAAqD,KAAAE,EAAAD,EAAAD,GAAAG,EAAArG,OAAA4E,EAAA,EAAA5E,CAAAoG,EAAA,GAA3ChD,EAA2CiD,EAAA,GAAlCrB,EAAkCqB,EAAA,GAC7C9C,EAAgBrD,KAAKM,eAAe4C,GACpCkD,EAAWpG,KAAKG,iBAAiBkD,EAAcjB,MACrD0C,EAAMjF,QAAUuG,EAAShE,KACzB0C,EAAMuB,kBAAoBD,EAASE,cAAgBF,EAASE,cAAgBF,EAASG,KACrFzB,EAAM0B,cAAgBJ,EAASE,cAC/BxB,EAAM2B,kBAAoB1D,KAAK2D,KAAK5B,EAAMA,MAAM6B,WAChD7B,EAAM8B,iBAAmB9B,EAAM2B,kBAAoB3B,EAAMuB,kBACzDvB,EAAMpF,eAAiBoF,EAAMA,MAAMlB,IAAI5D,KAAKsD,gBAAgBD,EAAeH,cC7F3E2D,EAAWC,IAAMD,SAGjBE,6MACJC,MAAQ,CACNC,WAAY,KACZC,UAAW,yFAGO,IAAAC,EAAAnH,KAClBoH,MAAM,wBACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAI,IAAIvH,EAAiBuH,KAClCH,KAAK,SAAAJ,GAAU,OAAIE,EAAKM,SAAS,CAACR,WAAYA,MAC9CS,MAAM,SAAAC,GAAK,OAAIR,EAAKM,SAAS,CAACP,UAAWS,uCAI5C,OAAI3H,KAAKgH,MAAME,UACLU,EAAAzD,EAAA0D,cAAA,SAAGD,EAAAzD,EAAA0D,cAAA,uBAAH,IAAsB7H,KAAKgH,MAAME,UAAUY,YAC1C9H,KAAKgH,MAAMC,WAElBW,EAAAzD,EAAA0D,cAACE,EAAD,CAAgBd,WAAYjH,KAAKgH,MAAMC,aAGjCW,EAAAzD,EAAA0D,cAAA,8BAtBIf,IAAMkB,WA2BlBC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAArI,OAAAC,EAAA,EAAAD,CAAAE,KAAAiI,IACjBE,EAAArI,OAAAsI,EAAA,EAAAtI,CAAAE,KAAAF,OAAAuI,EAAA,EAAAvI,CAAAmI,GAAAK,KAAAtI,KAAMkI,KACDK,kBAAoBJ,EAAKI,kBAAkBC,KAAvB1I,OAAA2I,EAAA,EAAA3I,CAAAqI,IACzBA,EAAKO,mBAAqBP,EAAKO,mBAAmBF,KAAxB1I,OAAA2I,EAAA,EAAA3I,CAAAqI,IAC1BA,EAAKQ,cAAgBR,EAAKQ,cAAcH,KAAnB1I,OAAA2I,EAAA,EAAA3I,CAAAqI,IACrBA,EAAKS,iBAAmBT,EAAKS,iBAAiBJ,KAAtB1I,OAAA2I,EAAA,EAAA3I,CAAAqI,IACxBA,EAAKU,GAAKV,EAAKU,GAAGL,KAAR1I,OAAA2I,EAAA,EAAA3I,CAAAqI,IACVA,EAAKnB,MAAQ,CACX8B,SAAU,CACRC,QAAS,cAGbZ,EAAKnB,MAAQmB,EAAKa,WAAWb,EAAKnB,MAAO,cAAerE,IAAS,GAAI,KAZpDwF,0EAeRjE,EAAQhB,EAASC,GAC1B,IAAMO,EAAY1D,KAAKkI,MAAMjB,WAAWvD,UAAUR,EAASC,GACrDoC,EAASvF,KAAKkI,MAAMjB,WAAW1B,OAAO7B,GAEtCuF,EAAmB,CACvBzJ,OAAQ0D,EACRgG,YAAa/F,EACbhG,KAAMuG,EACN6B,OAAQA,EACR4D,WANiBrJ,OAAOsJ,OAAO7D,GAAQ/B,IAAI,SAAAM,GAAC,OAAIA,EAAE8C,mBAAkByC,OAAO,SAAClF,EAAGmF,GAAJ,OAAUnF,EAAImF,GAAG,IAQ9F,OAAOxJ,OAAO+E,OAAOX,EAAQ+E,EAAkBjJ,KAAKuJ,OAAON,mCAGtDjC,GACL,MAAO,CACLwC,cAAexJ,KAAKyJ,gBAAgBzC,EAAM7J,MAC1CuM,gBAAiB1J,KAAK2J,kBAAkB3C,EAAMzB,OAAQyB,EAAMmC,sDAI/CS,GAAa,IAAAC,EAAA7J,KAC5BA,KAAKyH,SAAS,SAACqC,GAAD,MAAgB,CAC5BhB,SAAUhJ,OAAO+E,OAAOiF,EAAUhB,SAAUc,MAG9C5J,KAAKyH,SAAS,SAACqC,GAAD,OAAeD,EAAKN,OAAOO,sCAIzC,IAAMtJ,EAAUV,OAAOiK,KAAK/J,KAAKkI,MAAMjB,WAAW3G,gBAElD,OADAE,EAAQwJ,OAENpC,EAAAzD,EAAA0D,cAAA,WACED,EAAAzD,EAAA0D,cAAA,8CACAD,EAAAzD,EAAA0D,cAACoC,EAAD,CAAiBzJ,QAASA,EACxBhB,OAAQQ,KAAKgH,MAAMxH,OAAQ0J,YAAalJ,KAAKgH,MAAMkC,YAAagB,SAAUlK,KAAK2I,gBACjFf,EAAAzD,EAAA0D,cAACsC,EAAD,CAAoBrB,SAAU9I,KAAKgH,MAAM8B,SAAUoB,SAAUlK,KAAK4I,mBAClEhB,EAAAzD,EAAA0D,cAAA,wBACC7H,KAAKoK,kBACNxC,EAAAzD,EAAA0D,cAACwC,EAAA,UAAD,CAAW7C,KAAMxH,KAAKgH,MAAMwC,cAAec,SAAUtK,KAAKuI,kBAAmBgC,MAAOrN,IACpF0K,EAAAzD,EAAA0D,cAAA,oBACC7H,KAAKwK,mBACN5C,EAAAzD,EAAA0D,cAACwC,EAAA,UAAD,CAAW7C,KAAMxH,KAAKgH,MAAM0C,gBAAiBY,SAAUtK,KAAK0I,mBAAoB6B,MAAOrN,IACvF0K,EAAAzD,EAAA0D,cAAA,KAAG4C,UAAU,aAAb,qBAA4CzK,KAAKkI,MAAMjB,WAAWxG,0DAKtE,OACEmH,EAAAzD,EAAA0D,cAAA,OAAK6C,GAAG,kBAAkBD,UAAU,cAClC7C,EAAAzD,EAAA0D,cAAA,OAAK4C,UAAU,UAAf,QACCzK,KAAK2K,uDAMV,OACE/C,EAAAzD,EAAA0D,cAAChB,EAAD,KACEe,EAAAzD,EAAA0D,cAAA,QAAM4C,UAAU,sBAAhB,WACA7C,EAAAzD,EAAA0D,cAAA,QAAM4C,UAAU,+BAAhB,UAAqD7C,EAAAzD,EAAA0D,cAAA,QAAM4C,UAAU,eAAhB,gBACrD7C,EAAAzD,EAAA0D,cAAA,QAAM4C,UAAU,kCAAhB,IAAkD7C,EAAAzD,EAAA0D,cAAA,QAAM4C,UAAU,eAAhB,wBAClD7C,EAAAzD,EAAA0D,cAAA,QAAM4C,UAAU,kBAAhB,gEAMJ,OACE7C,EAAAzD,EAAA0D,cAAA,OAAK6C,GAAG,eAAeD,UAAU,cAC/B7C,EAAAzD,EAAA0D,cAAA,OAAK4C,UAAU,UAAf,QACCzK,KAAK2K,eACN/C,EAAAzD,EAAA0D,cAAA,QAAM4C,UAAU,yCAAhB,gBAA2D7C,EAAAzD,EAAA0D,cAAA,QAAM4C,UAAU,eAAhB,mCAC3D7C,EAAAzD,EAAA0D,cAAA,QAAM4C,UAAU,UAAhB,aACA7C,EAAAzD,EAAA0D,cAAA,QAAM4C,UAAU,0CAAhB,OAA6D7C,EAAAzD,EAAA0D,cAAA,QAAM4C,UAAU,eAAhB,iCAC7D7C,EAAAzD,EAAA0D,cAAA,QAAM4C,UAAU,UAAhB,aACA7C,EAAAzD,EAAA0D,cAAA,QAAM4C,UAAU,oBAAhB,gDAKQzD,GAAO,IAAA4D,EAAA5K,KACnBA,KAAKyH,SAAS,SAACqC,GACb,IAAMe,EAAW/K,OAAO+E,OAAO,GAAIiF,EAAW9C,GAC9C,OAAO4D,EAAK5B,WAAWhC,EAAO6D,EAASrL,OAAQqL,EAAS3B,uDAI5CtL,GAAe,IAAAkN,EAAA9K,KAAT+K,EAASC,UAAAzG,OAAA,QAAAxD,IAAAiK,UAAA,GAAAA,UAAA,GAAH,EAC1B,MAAO,CACL5I,KAAMpC,KAAKiL,cAAcrN,EAAK6B,OAAQ7B,EAAK8B,eAAekE,IAAI,IAAKhG,EAAK+B,UAAW/B,EAAKiC,QAAS,KAAKkL,GACtGG,SAAS,EACTC,SAAUvN,EAAKgC,OAAO4D,IAAI,SAAA4H,GAAC,OAAIN,EAAKrB,gBAAgB2B,EAAGL,EAAQ,gDAIjDxF,EAAQ4D,GAAY,IAAAkC,EAAArL,KAC9BW,EAAIb,OAAOwE,QAAQiB,GAAQ/B,IAAI,SAAA8H,GACnC,IAAM7L,EAAS6L,EAAM,GACf/F,EAAS+F,EAAM,GACrB,MAAO,CACLlJ,KAAOwF,EAAAzD,EAAA0D,cAAChB,EAAD,KAAWwE,EAAKJ,cAAcxL,EAAQ8F,EAAO7F,eAAekE,IAAI,IAAK2B,EAAOT,MAAOS,EAAO1F,SAAUwL,EAAKE,aAAahG,IAC7H2F,SAAS,EACTC,SAAU5F,EAAOR,QAAQR,QAAU,EAAI,GAAKgB,EAAOR,QAAQvB,IAAI,SAAAM,GAAC,OAAIhE,OAAO+E,OAAO,CAChFzC,KAAOwF,EAAAzD,EAAA0D,cAAChB,EAAD,KAAW/C,EAAEtE,OAAb,IAAsB6L,EAAKxC,GAAG/E,EAAEnE,WAAhC,KAA8C0L,EAAKxC,GAAG/E,EAAEiC,UAAxD,YACPmF,SAAS,EACTC,SAAU,YAIhB,MAAO,CACL/I,KAAOwF,EAAAzD,EAAA0D,cAAChB,EAAD,KACLe,EAAAzD,EAAA0D,cAAA,QAAM4C,UAAU,eAAhB,wBACA7C,EAAAzD,EAAA0D,cAAA,QAAM4C,UAAU,aAAae,EAAGrC,KAElC+B,SAAS,EACTC,SAAUxK,yCAIAlB,EAAQgM,EAAQ9L,EAAWE,GAA4B,IAAnB6L,EAAmBV,UAAAzG,OAAA,QAAAxD,IAAAiK,UAAA,GAAAA,UAAA,GAAJ,GAC/D,OAAQpD,EAAAzD,EAAA0D,cAAChB,EAAD,KACNe,EAAAzD,EAAA0D,cAAA,QAAM4C,UAAW,eAAiBiB,GAAiBjM,GACnDmI,EAAAzD,EAAA0D,cAAA,QAAM4C,UAAU,UAAUzK,KAAK6I,GAAG4C,IAClC7D,EAAAzD,EAAA0D,cAAA,QAAM4C,UAAU,aAAazK,KAAK6I,GAAGlJ,IACrCiI,EAAAzD,EAAA0D,cAAA,QAAM4C,UAAU,WAAW5K,yCAIlB0F,GACX,OAAQqC,EAAAzD,EAAA0D,cAAChB,EAAD,KACNe,EAAAzD,EAAA0D,cAAA,QAAM4C,UAAU,oBAAoBlF,EAAOkB,mBADrC,YAGNmB,EAAAzD,EAAA0D,cAAA,QAAM4C,UAAU,qBAAqBe,EAAGjG,EAAOc,oBAHzC,YAKNuB,EAAAzD,EAAA0D,cAAA,QAAM4C,UAAU,aAAae,EAAGjG,EAAOqB,0DAI7BhJ,EAAMsN,EAASS,EAAUC,GACrC,IAAM7N,EAASiC,KAAKgH,MAAM4E,GACpBzO,EAAO6C,KAAKgH,MAAM2E,GACpB5N,IACFA,EAAO8N,QAAS,GAElBjO,EAAKiO,QAAS,EACVjO,EAAKuN,WACLvN,EAAKsN,QAAUA,GAEnBlL,KAAKyH,SAAS,eAAAqE,EAAA,OAAAA,EAAA,GAAAhM,OAAAmF,EAAA,EAAAnF,CAAAgM,EACXF,EAAahO,GADFkC,OAAAmF,EAAA,EAAAnF,CAAAgM,EAEXH,EAAW7L,OAAO+E,OAAO,GAAI1H,IAFlB2O,8CAMElO,EAAMsN,GACtBlL,KAAK+L,cAAcnO,EAAMsN,EAAS,gBAAiB,0DAGlCtN,EAAMsN,GACvBlL,KAAK+L,cAAcnO,EAAMsN,EAAS,kBAAmB,2CAGpDc,GACD,OA8EJ,SAAYA,GAAuB,IAApBC,EAAoBjB,UAAAzG,OAAA,QAAAxD,IAAAiK,UAAA,GAAAA,UAAA,GAAb,YACpB,GAAU,OAANgB,QAAoBjL,IAANiL,EAAiB,MAAO,SAC1C,GAAY,IAARA,EAAEE,EAAS,MAAO,IACtB,GAAe,cAAXD,EACF,OAAOD,EAAErF,UAAUwF,QAAQ,GAE7B,IACIf,EAAIrI,KAAKC,MAAMgJ,EAAEE,EAAIF,EAAEI,GACvBzL,EAAIqL,EAAEE,EAAIF,EAAEI,EAChB,OAAQxE,EAAAzD,EAAA0D,cAAChB,EAAD,KAAiB,IAANuE,EAAU,GAAKA,EAAS,IAANzK,EAAU,IAHduL,EAG2CvL,EAHxCyL,EAG2CJ,EAAEI,EAHtCxE,EAAAzD,EAAA0D,cAAChB,EAAD,KAAUe,EAAAzD,EAAA0D,cAAA,WAAMqE,GAAhB,SAA+BtE,EAAAzD,EAAA0D,cAAA,WAAMuE,MAAhD,IAACF,EAAGE,EApF3BvD,CAAGmD,EAAGhM,KAAKgH,MAAM8B,SAASC,gBArLRjC,IAAMkB,WAyL7BqE,cACJ,SAAAA,EAAYnE,GAAO,IAAAoE,EAAA,OAAAxM,OAAAC,EAAA,EAAAD,CAAAE,KAAAqM,IACjBC,EAAAxM,OAAAsI,EAAA,EAAAtI,CAAAE,KAAAF,OAAAuI,EAAA,EAAAvI,CAAAuM,GAAA/D,KAAAtI,KAAMkI,KACDlB,MAAQ,CACXxH,OAAQ0I,EAAM1I,OACd0J,YAAahB,EAAMgB,aAErBoD,EAAKC,gBAAkBD,EAAKC,gBAAgB/D,KAArB1I,OAAA2I,EAAA,EAAA3I,CAAAwM,IACvBA,EAAKE,aAAeF,EAAKE,aAAahE,KAAlB1I,OAAA2I,EAAA,EAAA3I,CAAAwM,IAPHA,wEAWjB,IAAMJ,EAAI,GAAKlM,KAAKgH,MAAMkC,YAAYgD,EAAIlM,KAAKgH,MAAMkC,YAAYkD,EACjE,OACExE,EAAAzD,EAAA0D,cAAA,sBAEED,EAAAzD,EAAA0D,cAAA,UAAQqC,SAAUlK,KAAKuM,gBAAiBhL,MAAOvB,KAAKgH,MAAMxH,QACvDQ,KAAKyM,iBAHV,8BAOE7E,EAAAzD,EAAA0D,cAAA,SAAO6E,KAAK,OAAOxC,SAAUlK,KAAKwM,aAAcjL,MAAO2K,IAPzD,2DAcF,OAAOlM,KAAKkI,MAAM1H,QAAQgD,IAAI,SAAAhE,GAAM,OAClCoI,EAAAzD,EAAA0D,cAAA,UAAQ8E,IAAKnN,EAAQ+B,MAAO/B,GAASA,6CAIzBoN,GACd,IAAM5F,EAAQ,CAAExH,OAAQoN,EAAM1I,OAAO3C,OACrCvB,KAAKyH,SAAS,kBAAMT,IACpBhH,KAAKkI,MAAMgC,SAASlD,wCAGT4F,GACX,IAAMC,EAASC,WAAWF,EAAM1I,OAAO3C,OACvC,IAAIwL,MAAMF,GAAV,CACA,IAAM7F,EAAQ,CAAEkC,YAAavG,IAASkK,EAAQ,KAC9C7M,KAAKyH,SAAS,kBAAMT,IACpBhH,KAAKkI,MAAMgC,SAASlD,WA5CMF,IAAMkB,WAiD9BgF,cACJ,SAAAA,EAAY9E,GAAO,IAAA+E,EAAA,OAAAnN,OAAAC,EAAA,EAAAD,CAAAE,KAAAgN,IACjBC,EAAAnN,OAAAsI,EAAA,EAAAtI,CAAAE,KAAAF,OAAAuI,EAAA,EAAAvI,CAAAkN,GAAA1E,KAAAtI,KAAMkI,KACDgC,SAAW+C,EAAK/C,SAAS1B,KAAd1I,OAAA2I,EAAA,EAAA3I,CAAAmN,IAFCA,wEAKVC,GAAG,IAAAC,EACcD,EAAEhJ,OAAlB9B,EADE+K,EACF/K,KAAMb,EADJ4L,EACI5L,MACdvB,KAAKkI,MAAMgC,SAAXpK,OAAAmF,EAAA,EAAAnF,CAAA,GAAsBsC,EAAOb,qCAI7B,OACEqG,EAAAzD,EAAA0D,cAAA,OAAK6C,GAAG,YACN9C,EAAAzD,EAAA0D,cAAA,SAAO6C,GAAG,YAAYgC,KAAK,QAAQtK,KAAK,UAAUb,MAAM,YAAY6L,QAAyC,cAAhCpN,KAAKkI,MAAMY,SAASC,QAAyBmB,SAAUlK,KAAKkK,WACzItC,EAAAzD,EAAA0D,cAAA,SAAOwF,IAAI,aAAX,aAFF,mBAIEzF,EAAAzD,EAAA0D,cAAA,SAAO6C,GAAG,WAAWgC,KAAK,QAAQtK,KAAK,UAAUb,MAAM,WAAW6L,QAAyC,aAAhCpN,KAAKkI,MAAMY,SAASC,QAAwBmB,SAAUlK,KAAKkK,WACtItC,EAAAzD,EAAA0D,cAAA,SAAOwF,IAAI,YAAX,oBAlByBvG,IAAMkB,WAqCvC,SAASwD,EAAG8B,GACV,MAAO,IAAMA,EAGAvG,QC7SKwG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjG,EAAAzD,EAAA0D,cAACiG,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9G,KAAK,SAAA+G,GACjCA,EAAaC","file":"static/js/main.001811a0.chunk.js","sourcesContent":["export default {\r\n    tree: {\r\n        base: {\r\n            listStyle: 'none',\r\n            backgroundColor: '#21252B',\r\n            margin: 0,\r\n            padding: 0,\r\n            color: '#9DA5AB',\r\n            fontFamily: 'lucida grande ,tahoma,verdana,arial,sans-serif',\r\n            fontSize: '16px'\r\n        },\r\n        node: {\r\n            base: {\r\n                position: 'relative'\r\n            },\r\n            link: {\r\n                cursor: 'pointer',\r\n                position: 'relative',\r\n                padding: '0px 5px',\r\n                display: 'block'\r\n            },\r\n            activeLink: {\r\n                background: '#31363F'\r\n            },\r\n            toggle: {\r\n                base: {\r\n                    position: 'relative',\r\n                    display: 'inline-block',\r\n                    verticalAlign: 'top',\r\n                    marginLeft: '-5px',\r\n                    height: '24px',\r\n                    width: '24px'\r\n                },\r\n                wrapper: {\r\n                    position: 'absolute',\r\n                    top: '50%',\r\n                    left: '50%',\r\n                    margin: '-7px 0 0 -7px',\r\n                    height: '14px'\r\n                },\r\n                height: 14,\r\n                width: 14,\r\n                arrow: {\r\n                    fill: '#9DA5AB',\r\n                    strokeWidth: 0\r\n                }\r\n            },\r\n            header: {\r\n                base: {\r\n                    display: 'inline-block',\r\n                    verticalAlign: 'top',\r\n                    color: '#9DA5AB'\r\n                },\r\n                connector: {\r\n                    width: '2px',\r\n                    height: '12px',\r\n                    borderLeft: 'solid 2px black',\r\n                    borderBottom: 'solid 2px black',\r\n                    position: 'absolute',\r\n                    top: '0px',\r\n                    left: '-21px'\r\n                },\r\n                title: {\r\n                    lineHeight: '24px',\r\n                    verticalAlign: 'middle'\r\n                }\r\n            },\r\n            subtree: {\r\n                listStyle: 'none',\r\n                paddingLeft: '19px'\r\n            },\r\n            loading: {\r\n                color: '#E2C089'\r\n            }\r\n        }\r\n    }\r\n};\r\n","import Fraction from 'fraction.js'\r\n\r\nclass BuildTreeNode {\r\n  constructor(recipe, output, demand_per_day, recipeQty, inputs, factory) {\r\n    this.recipe = recipe\r\n    this.output = output\r\n    this.demand_per_day = demand_per_day\r\n    this.recipeQty = recipeQty\r\n    this.inputs = inputs\r\n    this.factory = factory\r\n  }\r\n}\r\n\r\nclass RecipeCalculator {\r\n  constructor(rawData) {\r\n    this.recipeToBuilding = this._mapRecipesToBuildings(rawData.producers)\r\n    this.outputToRecipe = this._mapOutputs(rawData.recipes)\r\n    this.dataTimestamp = rawData.timestamp\r\n  }\r\n\r\n  _mapRecipesToBuildings(producers) {\r\n    let r = {}\r\n    for (let p of producers) {\r\n      for (let recipe of p.recipes) {\r\n        r[recipe] = p\r\n      }\r\n    }\r\n    return r\r\n  }\r\n\r\n  _mapOutputs(recipes) {\r\n    let r = {}\r\n    for (let recipe of recipes) {\r\n      if (recipe.name === 'WaterWell') continue\r\n      for (let out of recipe.outputs) {\r\n        r[out.name] = recipe\r\n      }\r\n    }\r\n    return r\r\n  }\r\n\r\n  outputQtyPerDay(recipe, output) {\r\n    return Fraction(recipe.outputs.find(o => o.name === output).amount, Math.floor(recipe.days))\r\n  }\r\n\r\n  buildTree(product, qty_per_day) {\r\n    // console.log(\"PRODUCT\", product, qty_per_day)\r\n    let productRecipe = this.outputToRecipe[product]\r\n    let outputQtyPerDay = this.outputQtyPerDay(productRecipe, product)\r\n    let recipeQty = qty_per_day.div(outputQtyPerDay)\r\n    let input_qty = (inputCount) => recipeQty.mul(Fraction(inputCount, Math.floor(productRecipe.days)))\r\n    return new BuildTreeNode(productRecipe.name, product, qty_per_day, recipeQty, \r\n      productRecipe.inputs.map(input => this.buildTree(input.name, input_qty(input.amount))),\r\n      this.recipeToBuilding[productRecipe.name].name)\r\n  }\r\n\r\n  totals(root) {\r\n    const t = this._totals(root)\r\n    this._addTotalFractionsAndCost(root, t)\r\n    return t\r\n  }\r\n\r\n  _totals(node) {\r\n    let newTotal = () => Object.assign({total: Fraction(0), towards: []})\r\n\r\n    let addTotals = (target, a) => {\r\n      for (let [recipe, otherTotal] of Object.entries(a)) {\r\n        if (!target.hasOwnProperty(recipe)) target[recipe] = newTotal();\r\n        target[recipe].total = target[recipe].total.add(otherTotal.total)\r\n      }\r\n    }\r\n\r\n    let t = {[node.output]: {total: node.recipeQty, towards: []}}\r\n    for (let input of node.inputs) {\r\n      addTotals(t, this.totals(input))\r\n    }\r\n    return t\r\n  }\r\n\r\n  _addTotalFractionsAndCost(root, totals) {\r\n    const traverse = (node) => {\r\n      for (let input of node.inputs) {\r\n        const inTotal = totals[input.output]\r\n        inTotal.towards.push({\r\n          recipe: node.recipe,\r\n          product: node.product,\r\n          recipeQty: input.recipeQty,\r\n          fraction: input.recipeQty.div(totals[input.output].total)\r\n        })\r\n        traverse(input)\r\n      }\r\n    }\r\n    traverse(root)\r\n    for (let [product, total] of Object.entries(totals)) {\r\n      const productRecipe = this.outputToRecipe[product]\r\n      const building = this.recipeToBuilding[productRecipe.name]\r\n      total.factory = building.name\r\n      total.singleFactoryCost = building.harvesterCost ? building.harvesterCost : building.cost\r\n      total.isHarvester = !!building.harvesterCost\r\n      total.roundFactoryCount = Math.ceil(total.total.valueOf())\r\n      total.totalFactoryCost = total.roundFactoryCount * total.singleFactoryCost\r\n      total.demand_per_day = total.total.mul(this.outputQtyPerDay(productRecipe, product))\r\n    }\r\n  }\r\n}\r\n\r\nexport default RecipeCalculator\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport {Treebeard} from 'react-treebeard'\r\nimport Fraction from 'fraction.js'\r\nimport TreebeardTheme from \"./TreebeardTheme.js\";\r\nimport RecipeCalculator from \"./RecipeCalculator.js\"\r\n\r\nconst Fragment = React.Fragment\r\n\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    calculator: null,\r\n    loadError: null,\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('roidata/exports.json')\r\n      .then(response => response.json())\r\n      .then(data => new RecipeCalculator(data))\r\n      .then(calculator => this.setState({calculator: calculator}) )\r\n      .catch(error => this.setState({loadError: error}))\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loadError) {\r\n      return (<p><b>Load error</b> {this.state.loadError.toString()}</p>)\r\n    } else if (this.state.calculator) {\r\n      return (\r\n        <CalculatorRoot calculator={this.state.calculator}/>\r\n      )\r\n    } else {\r\n      return (<p>Loading...</p>)\r\n    }\r\n  }\r\n}\r\n\r\nclass CalculatorRoot extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.onBuildTreeToggle = this.onBuildTreeToggle.bind(this)\r\n    this.onTotalsTreeToggle = this.onTotalsTreeToggle.bind(this)\r\n    this.onInputChange = this.onInputChange.bind(this)\r\n    this.onSettingsChange = this.onSettingsChange.bind(this)\r\n    this.pf = this.pf.bind(this)\r\n    this.state = {\r\n      settings: {\r\n        numbers: 'fractions',\r\n      }\r\n    }\r\n    this.state = this._recompute(this.state, 'ChickenMeat', Fraction(11, 15))\r\n  }\r\n\r\n  _recompute(target, product, qty_per_day) {\r\n    const buildTree = this.props.calculator.buildTree(product, qty_per_day)\r\n    const totals = this.props.calculator.totals(buildTree)\r\n    const grandTotal = Object.values(totals).map(t => t.totalFactoryCost).reduce((a, b) => a + b, 0)\r\n    const calculationState = {\r\n      recipe: product,\r\n      requiredQty: qty_per_day,\r\n      tree: buildTree,\r\n      totals: totals,\r\n      grandTotal: grandTotal,\r\n    }\r\n    return Object.assign(target, calculationState, this._trees(calculationState))\r\n  }\r\n\r\n  _trees(state) {\r\n    return {\r\n      treebeardTree: this.toTreebeardTree(state.tree),\r\n      treebeardTotals: this.toTreebeardTotals(state.totals, state.grandTotal),\r\n    }\r\n  }\r\n\r\n  onSettingsChange(newSettings) {\r\n    this.setState((prevState) => ({\r\n      settings: Object.assign(prevState.settings, newSettings)\r\n    }))\r\n    // double update but meh\r\n    this.setState((prevState) => this._trees(prevState))\r\n  }\r\n\r\n  render() {\r\n    const recipes = Object.keys(this.props.calculator.outputToRecipe)\r\n    recipes.sort()\r\n    return (\r\n      <div>\r\n        <h4>What and how much do you desire?</h4>\r\n        <CalculatorInput recipes={recipes}\r\n          recipe={this.state.recipe} requiredQty={this.state.requiredQty} onChange={this.onInputChange} />\r\n        <CalculatorSettings settings={this.state.settings} onChange={this.onSettingsChange} />\r\n        <h4>Build tree</h4>\r\n        {this.buildTreeHeader()}\r\n        <Treebeard data={this.state.treebeardTree} onToggle={this.onBuildTreeToggle} style={TreebeardTheme} />\r\n        <h4>Totals</h4>\r\n        {this.totalsTreeHeader()}\r\n        <Treebeard data={this.state.treebeardTotals} onToggle={this.onTotalsTreeToggle} style={TreebeardTheme} />\r\n        <p className='timestamp'>Data harvested on {this.props.calculator.dataTimestamp}</p>\r\n      </div>)\r\n  }\r\n\r\n  buildTreeHeader() {\r\n    return (\r\n      <div id='buildTreeHeader' className='treeHeader'>\r\n        <div className='filler'>&nbsp;</div>\r\n        {this.recipeHeader()}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  recipeHeader() {\r\n    return (\r\n      <Fragment>\r\n        <span className=\"productName header\">Product</span>\r\n        <span className=\"demand header tooltipHolder\">Demand*<span className='tooltipText'>per 15 days</span></span>\r\n        <span className=\"recipeQty header tooltipHolder\">x<span className=\"tooltipText\">number of factories</span></span>\r\n        <span className=\"factory header\">Factory Building</span>\r\n      </Fragment>\r\n    )\r\n  }\r\n\r\n  totalsTreeHeader() {\r\n    return (\r\n      <div id='totalsHeader' className='treeHeader'>\r\n        <div className='filler'>&nbsp;</div>\r\n        {this.recipeHeader()}\r\n        <span className=\"recipeQtyRoundUp header tooltipHolder\">⌈x⌉<span className=\"tooltipText\">number of factories rounded up</span></span>\r\n        <span className=\"header\">&nbsp;x&nbsp;</span>\r\n        <span className=\"singleFactoryCost header tooltipHolder\">Cost<span className=\"tooltipText\">single factory or field cost</span></span>\r\n        <span className=\"header\">&nbsp;=&nbsp;</span>\r\n        <span className=\"totalCost header\">Total</span>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  onInputChange(state) {\r\n    this.setState((prevState) => {\r\n      const newState = Object.assign({}, prevState, state)\r\n      return this._recompute(state, newState.recipe, newState.requiredQty)\r\n    })\r\n  }\r\n\r\n  toTreebeardTree(node, level=0) {\r\n    return {\r\n      name: this._recipeHeader(node.output, node.demand_per_day.mul(15), node.recipeQty, node.factory, 'pn'+level),\r\n      toggled: true,\r\n      children: node.inputs.map(i => this.toTreebeardTree(i, level + 1))\r\n    }\r\n  }\r\n\r\n  toTreebeardTotals(totals, grandTotal) {\r\n    const r = Object.entries(totals).map(entry => {\r\n      const output = entry[0]\r\n      const totals = entry[1]\r\n      return {\r\n        name: (<Fragment>{this._recipeHeader(output, totals.demand_per_day.mul(15), totals.total, totals.factory)}{this._renderCosts(totals)}</Fragment>),\r\n        toggled: false,\r\n        children: totals.towards.length <= 1 ? [] : totals.towards.map(t => Object.assign({\r\n          name: (<Fragment>{t.recipe} {this.pf(t.recipeQty)} ({this.pf(t.fraction)} of all)</Fragment>),\r\n          toggled: false,\r\n          children: null,\r\n        }))\r\n      }\r\n    });\r\n    return {\r\n      name: (<Fragment>\r\n        <span className=\"totalHeader\">Total excluding hubs</span>\r\n        <span className=\"totalCost\">{pc(grandTotal)}</span>\r\n        </Fragment>),\r\n      toggled: true,\r\n      children: r,\r\n    }\r\n  }\r\n\r\n  _recipeHeader(output, demand, recipeQty, factory, extraClassName='') {\r\n    return (<Fragment>\r\n      <span className={\"productName \" + extraClassName}>{output}</span>\r\n      <span className=\"demand\">{this.pf(demand)}</span>\r\n      <span className=\"recipeQty\">{this.pf(recipeQty)}</span>\r\n      <span className=\"factory\">{factory}</span>\r\n      </Fragment>)\r\n  }\r\n\r\n  _renderCosts(totals) {\r\n    return (<Fragment>\r\n      <span className=\"recipeQtyRoundUp\">{totals.roundFactoryCount}</span>\r\n      &nbsp;x&nbsp;\r\n      <span className=\"singleFactoryCost\">{pc(totals.singleFactoryCost)}</span>\r\n      &nbsp;=&nbsp;\r\n      <span className=\"totalCost\">{pc(totals.totalFactoryCost)}</span>\r\n      </Fragment>)\r\n  }\r\n\r\n  _onTreeToggle(node, toggled, treeName, cursorName) {\r\n    const cursor = this.state[cursorName]\r\n    const tree = this.state[treeName]\r\n    if (cursor) {\r\n      cursor.active = false;\r\n    }\r\n    node.active = true;\r\n    if (node.children) { \r\n        node.toggled = toggled; \r\n    }\r\n    this.setState(() => ({\r\n      [cursorName]: node, \r\n      [treeName]: Object.assign({}, tree)\r\n    }));\r\n  }\r\n\r\n  onBuildTreeToggle(node, toggled) {\r\n    this._onTreeToggle(node, toggled, 'treebeardTree', 'buildCursor')\r\n  }\r\n\r\n  onTotalsTreeToggle(node, toggled) {\r\n    this._onTreeToggle(node, toggled, 'treebeardTotals', 'totalsCursor')\r\n  }\r\n\r\n  pf(f) {\r\n    return pf(f, this.state.settings.numbers)\r\n  }\r\n}\r\n\r\nclass CalculatorInput extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      recipe: props.recipe,\r\n      requiredQty: props.requiredQty,\r\n    }\r\n    this.onRecipeChanged = this.onRecipeChanged.bind(this)\r\n    this.onQtyChanged = this.onQtyChanged.bind(this)\r\n  }\r\n\r\n  render() {\r\n    const n = 15 * this.state.requiredQty.n / this.state.requiredQty.d\r\n    return (\r\n      <form>\r\n        Recipe: \r\n        <select onChange={this.onRecipeChanged} value={this.state.recipe}>\r\n          {this.renderOptions()}\r\n        </select>\r\n        &nbsp;\r\n        Required quantity:&nbsp;\r\n        <input type='text' onChange={this.onQtyChanged} value={n} />\r\n        &nbsp;per 15 days\r\n      </form>\r\n    )\r\n  }\r\n\r\n  renderOptions() {\r\n    return this.props.recipes.map(recipe => (\r\n      <option key={recipe} value={recipe}>{recipe}</option>\r\n    ))\r\n  }\r\n\r\n  onRecipeChanged(event) {\r\n    const state = { recipe: event.target.value }\r\n    this.setState(() => state)\r\n    this.props.onChange(state)\r\n  }\r\n\r\n  onQtyChanged(event) {\r\n    const intVal = parseFloat(event.target.value)\r\n    if (isNaN(intVal)) return\r\n    const state = { requiredQty: Fraction(intVal, 15) }\r\n    this.setState(() => state)\r\n    this.props.onChange(state)\r\n  }\r\n}\r\n\r\n\r\nclass CalculatorSettings extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange(e) {\r\n    const { name, value } = e.target;\r\n    this.props.onChange({[name]: value})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id='settings'>\r\n        <input id='fractions' type='radio' name='numbers' value='fractions' checked={this.props.settings.numbers === 'fractions'} onChange={this.onChange}/>\r\n        <label for='fractions'>fractions</label>\r\n        &nbsp;&nbsp;&nbsp;&nbsp;\r\n        <input id='decimals' type='radio' name='numbers' value='decimals' checked={this.props.settings.numbers === 'decimals'} onChange={this.onChange}/>\r\n        <label for='decimals'>decimals</label>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nfunction pf(f, format='fractions') {\r\n  if (f === null || f === undefined) return '<NOOO>'\r\n  if (f.n === 0) return '0'\r\n  if (format !== 'fractions') {\r\n    return f.valueOf().toFixed(2)\r\n  }\r\n  const _render_proper_fraction = (n, d) => (<Fragment><sup>{n}</sup>&frasl;<sub>{d}</sub></Fragment>)\r\n  let i = Math.floor(f.n / f.d)\r\n  let r = f.n % f.d\r\n  return (<Fragment>{i === 0 ? '' : i}{r === 0 ? '' : _render_proper_fraction(r, f.d)}</Fragment>)\r\n}\r\n\r\nfunction pc(c) {\r\n  return \"$\" + c;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}